{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%config IPCompleter.greedy=True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from scipy import stats, optimize\n",
    "import csv\n",
    "import matplotlib.pyplot as plt\n",
    "import pymare\n",
    "import itertools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = dict()\n",
    "taskList = list()\n",
    "siteList = ['KUMC2018', 'MCRI2018', 'MCW2018', 'MU2018', 'UNMC2018', 'UTSW2018']\n",
    "pred_task = ['stg01', 'stg02up', 'stg12up']\n",
    "fs_type = ['full', 'rm']\n",
    "basepath = './data/'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get feature list\n",
    "catFea = list()\n",
    "for datakey in itertools.product(*[siteList, pred_task, fs_type]):\n",
    "    filepath = basepath+datakey[0]+\"/1d_\"+datakey[2]+'_'+datakey[1]+\".csv\"\n",
    "    tempData = pd.read_csv(filepath)    \n",
    "#    itemsCount = tempData['Feature'].value_counts()    \n",
    "#    filepath = basepath+datakey[0]+\"/1d_\"+datakey[2]+'_'+datakey[1]+\"Count.csv\"    \n",
    "#    itemsCount.to_csv(filepath)\n",
    "    feaList = tempData['Feature'].unique()\n",
    "    for fea in feaList:\n",
    "        tempData2 = tempData[tempData['Feature'] == fea]\n",
    "        if all(x.is_integer() for x in tempData2['val'].to_numpy()):\n",
    "            catFea.append(fea)\n",
    "catFea = np.unique(np.array(catFea))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Find [and Count #row] all feature with only integer in value field\n",
    "countinData = dict()\n",
    "for datakey in itertools.product(*[siteList, pred_task, fs_type]):\n",
    "    filepath = basepath+datakey[0]+\"/1d_\"+datakey[2]+'_'+datakey[1]+\".csv\"\n",
    "    tempData = pd.read_csv(filepath)\n",
    "    tempData2 = tempData[tempData['Feature'].isin(catFea)]\n",
    "    tempData3 = tempData2['Feature'].value_counts()\n",
    "    tempData3 = tempData3.to_frame()\n",
    "    tempData3 = tempData3.rename(columns={'Feature': \"count\"})\n",
    "    tempData3 = tempData3.sort_values(by=['count'], ascending=False)\n",
    "    tempData3.index.name = 'Feature'\n",
    "    tempData3.reset_index(inplace=True)\n",
    "    tempData3.insert(0, 'site', datakey[0])\n",
    "    tempData3.insert(1, 'pred_task', datakey[1])\n",
    "    tempData3.insert(2, 'fs_type', datakey[2])\n",
    "    countinData[datakey] = tempData3\n",
    "pd.concat(countinData.values()).to_csv('findDiscrete.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('KUMC2018', 'stg01', 'full')\n",
      "544\n",
      "544\n",
      "('KUMC2018', 'stg01', 'rm')\n",
      "540\n",
      "540\n",
      "('KUMC2018', 'stg02up', 'full')\n",
      "539\n",
      "539\n",
      "('KUMC2018', 'stg02up', 'rm')\n",
      "545\n",
      "545\n",
      "('KUMC2018', 'stg12up', 'full')\n",
      "530\n",
      "530\n",
      "('KUMC2018', 'stg12up', 'rm')\n",
      "525\n",
      "525\n",
      "('MCRI2018', 'stg01', 'full')\n",
      "252\n",
      "252\n",
      "('MCRI2018', 'stg01', 'rm')\n",
      "248\n",
      "248\n",
      "('MCRI2018', 'stg02up', 'full')\n",
      "240\n",
      "240\n",
      "('MCRI2018', 'stg02up', 'rm')\n",
      "238\n",
      "238\n",
      "('MCRI2018', 'stg12up', 'full')\n",
      "237\n",
      "237\n",
      "('MCRI2018', 'stg12up', 'rm')\n",
      "248\n",
      "248\n",
      "('MCW2018', 'stg01', 'full')\n",
      "286\n",
      "286\n",
      "('MCW2018', 'stg01', 'rm')\n",
      "286\n",
      "286\n",
      "('MCW2018', 'stg02up', 'full')\n",
      "272\n",
      "272\n",
      "('MCW2018', 'stg02up', 'rm')\n",
      "277\n",
      "277\n",
      "('MCW2018', 'stg12up', 'full')\n",
      "273\n",
      "273\n",
      "('MCW2018', 'stg12up', 'rm')\n",
      "298\n",
      "298\n",
      "('MU2018', 'stg01', 'full')\n",
      "361\n",
      "361\n",
      "('MU2018', 'stg01', 'rm')\n",
      "369\n",
      "369\n",
      "('MU2018', 'stg02up', 'full')\n",
      "349\n",
      "349\n",
      "('MU2018', 'stg02up', 'rm')\n",
      "343\n",
      "343\n",
      "('MU2018', 'stg12up', 'full')\n",
      "372\n",
      "372\n",
      "('MU2018', 'stg12up', 'rm')\n",
      "374\n",
      "374\n",
      "('UNMC2018', 'stg01', 'full')\n",
      "347\n",
      "347\n",
      "('UNMC2018', 'stg01', 'rm')\n",
      "338\n",
      "338\n",
      "('UNMC2018', 'stg02up', 'full')\n",
      "353\n",
      "353\n",
      "('UNMC2018', 'stg02up', 'rm')\n",
      "344\n",
      "344\n",
      "('UNMC2018', 'stg12up', 'full')\n",
      "332\n",
      "332\n",
      "('UNMC2018', 'stg12up', 'rm')\n",
      "335\n",
      "335\n",
      "('UTSW2018', 'stg01', 'full')\n",
      "286\n",
      "286\n",
      "('UTSW2018', 'stg01', 'rm')\n",
      "302\n",
      "302\n",
      "('UTSW2018', 'stg02up', 'full')\n",
      "299\n",
      "299\n",
      "('UTSW2018', 'stg02up', 'rm')\n",
      "304\n",
      "304\n",
      "('UTSW2018', 'stg12up', 'full')\n",
      "292\n",
      "292\n",
      "('UTSW2018', 'stg12up', 'rm')\n",
      "304\n",
      "304\n"
     ]
    }
   ],
   "source": [
    "#Check if Binary\n",
    "rowNonBinary = dict()\n",
    "for datakey in itertools.product(*[siteList, pred_task, fs_type]):\n",
    "    filepath = basepath+datakey[0]+\"/1d_\"+datakey[2]+'_'+datakey[1]+\".csv\"\n",
    "    tempData = pd.read_csv(filepath)\n",
    "    checkBinary = countinData[datakey][countinData[datakey]['count'] == 2]['Feature']\n",
    "    tempData2 = tempData[tempData['Feature'].isin(checkBinary)]\n",
    "    tempData3 = tempData2[(tempData2['val'] == 0) | (tempData2['val'] == 1)][['Feature', 'val']]\n",
    "    tempData3 = pd.DataFrame(tempData3['Feature'].unique())\n",
    "    tempData3.insert(0, 'site', datakey[0])\n",
    "    tempData3.insert(1, 'pred_task', datakey[1])\n",
    "    tempData3.insert(2, 'fs_type', datakey[2])\n",
    "    rowNonBinary[datakey] = tempData3\n",
    "    print(datakey)\n",
    "    print(len(rowNonBinary[datakey]))\n",
    "    print(len(checkBinary))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
